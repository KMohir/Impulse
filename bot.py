import asyncio
import logging
import os
import shutil
import subprocess
import uuid
from typing import List, Optional

import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message

import config

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

PROJECT_ROOT = "/home/mohirbek/Projects/Impulse"
CHUNK_DURATION = 48  # —Å–µ–∫—É–Ω–¥


def _get_audio_duration(file_path: str) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    cmd = [
        "ffprobe",
        "-v", "error",
        "-show_entries", "format=duration",
        "-of", "default=noprint_wrappers=1:nokey=1",
        file_path
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        raise RuntimeError(f"ffprobe error: {result.stderr}")
    try:
        return float(result.stdout.strip())
    except ValueError:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.stdout}")


def _run_ffmpeg_to_wav(src_path: str, dst_path: str) -> None:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç (16–∫–ì—Ü, –º–æ–Ω–æ)"""
    cmd = [
        "ffmpeg",
        "-y",
        "-i", src_path,
        "-ac", "1",
        "-ar", "16000",
        dst_path,
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode != 0:
        raise RuntimeError(f"ffmpeg error: {result.stderr.decode(errors='ignore')}")


def _split_audio_to_chunks(wav_path: str, temp_dir: str) -> List[str]:
    """–†–∞–∑—Ä–µ–∑–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 48 —Å–µ–∫—É–Ω–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∫—É—Å–∫–∞–º"""
    duration = _get_audio_duration(wav_path)
    chunk_paths = []
    
    if duration <= CHUNK_DURATION:
        # –ê—É–¥–∏–æ –∫–æ—Ä–æ—á–µ 48 —Å–µ–∫—É–Ω–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        chunk_path = os.path.join(temp_dir, "chunk_0.wav")
        shutil.copy2(wav_path, chunk_path)
        chunk_paths.append(chunk_path)
        return chunk_paths
    
    # –†–∞–∑—Ä–µ–∑–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 48 —Å–µ–∫—É–Ω–¥
    chunk_index = 0
    start_time = 0.0
    
    while start_time < duration:
        chunk_path = os.path.join(temp_dir, f"chunk_{chunk_index}.wav")
        chunk_duration = min(CHUNK_DURATION, duration - start_time)
        
        cmd = [
            "ffmpeg",
            "-y",
            "-i", wav_path,
            "-ss", str(start_time),
            "-t", str(chunk_duration),
            "-ac", "1",
            "-ar", "16000",
            chunk_path,
        ]
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode != 0:
            raise RuntimeError(f"ffmpeg split error: {result.stderr.decode(errors='ignore')}")
        
        chunk_paths.append(chunk_path)
        chunk_index += 1
        start_time += CHUNK_DURATION
    
    return chunk_paths


def _split_text_for_telegram(text: str, max_length: int = 4000) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    sentences = text.split('. ')
    
    for sentence in sentences:
        if len(current_part) + len(sentence) + 2 <= max_length:
            if current_part:
                current_part += ". " + sentence
            else:
                current_part = sentence
        else:
            if current_part:
                parts.append(current_part + ".")
                current_part = sentence
            else:
                # –ï—Å–ª–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                words = sentence.split()
                for word in words:
                    if len(current_part) + len(word) + 1 <= max_length:
                        if current_part:
                            current_part += " " + word
                        else:
                            current_part = word
                    else:
                        if current_part:
                            parts.append(current_part)
                            current_part = word
                        else:
                            parts.append(word)
    
    if current_part:
        parts.append(current_part)
    
    return parts


def _post_to_stt(wav_path: str, filename_for_form: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ STT API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    headers = {"x-api-key": config.MUXLISA_API_KEY}
    try:
        with open(wav_path, "rb") as f:
            files = [("audio", (filename_for_form, f, "audio/wav"))]
            # –¢–∞–π–º–∞—É—Ç: 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ
            resp = requests.post(
                config.MUXLISA_STT_URL,
                headers=headers,
                files=files,
                data={},
                timeout=(30, 120)
            )
        resp.raise_for_status()
        try:
            js = resp.json()
            for key in ("text", "result", "transcript"):
                if key in js and isinstance(js[key], str):
                    return js[key]
            return str(js)
        except Exception:
            return resp.text.strip() or ""
    except requests.exceptions.Timeout:
        logger.error(f"Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ STT –¥–ª—è —Ñ–∞–π–ª–∞ {filename_for_form}")
        return ""
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ STT: {e}")
        return ""


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã Ovozli xabar yoki audio fayl yuboring ‚Äî men matnni qaytaraman.")


@dp.message(F.voice | F.audio)
async def handle_audio_message(message: Message):
    await bot.send_chat_action(message.chat.id, "typing")

    file_id: Optional[str] = None
    if message.voice:
        file_id = message.voice.file_id
    elif message.audio:
        file_id = message.audio.file_id

    if not file_id:
        await message.answer("Faylni olishning imkoni bo‚Äòlmadi. Iltimos, yana urinib ko‚Äòring.")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ
    temp_dir = None
    src_path = None
    
    try:
        tg_file = await bot.get_file(file_id)
        src_ext = os.path.splitext(tg_file.file_path or "")[1] or ".ogg"
        rnd = uuid.uuid4().hex
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—É–¥–∏–æ
        temp_dir = os.path.join(PROJECT_ROOT, f"temp_audio_{rnd}")
        os.makedirs(temp_dir, exist_ok=True)
        
        src_path = os.path.join(temp_dir, f"original{src_ext}")
        wav_path = os.path.join(temp_dir, "full.wav")

        # –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        await bot.download_file(tg_file.file_path, destination=src_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV 16–∫–ì—Ü –º–æ–Ω–æ
        _run_ffmpeg_to_wav(src_path, wav_path)

        # –†–∞–∑—Ä–µ–∑–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 48 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        chunk_paths = _split_audio_to_chunks(wav_path, temp_dir)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫ —á–µ—Ä–µ–∑ STT
        all_texts = []
        for i, chunk_path in enumerate(chunk_paths):
            try:
                form_filename = f"{uuid.uuid4().hex}.wav"
                text_result = _post_to_stt(chunk_path, form_filename)
                if text_result and text_result.strip():
                    all_texts.append(text_result.strip())
                    logger.info(f"Chunk {i+1}/{len(chunk_paths)} processed: {len(text_result)} chars")
                else:
                    logger.warning(f"Chunk {i+1}/{len(chunk_paths)} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            except Exception as chunk_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Å–∫–∞ {i+1}/{len(chunk_paths)}: {chunk_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∫—É—Å–∫–æ–≤
                continue

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        combined_text = " ".join(all_texts)
        
        if not combined_text:
            await message.answer("Tanish natijasi bo‚Äòsh. Yana urinib ko‚Äòring.")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            text_parts = _split_text_for_telegram(combined_text)
            for i, part in enumerate(text_parts):
                try:
                    if i == 0:
                        await message.answer(part)
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                        await message.answer(f"[{i+1}/{len(text_parts)}] {part}")
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limit
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ {i+1}: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
                    continue
            
    except Exception as e:
        logger.error(f"STT error: {e}", exc_info=True)
        try:
            await message.answer("Audio qayta ishlashda xatolik yuz berdi. Tizimda ffmpeg va ffprobe o‚Äòrnatilganini tekshiring.")
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –≤—Å–µ —Ñ–∞–π–ª—ã
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {temp_dir}: {e}")


@dp.message()
async def default_message(message: Message):
    await message.answer("Ovozli xabar yoki audio fayl yuboring. Men uni matnga aylantirib beraman.")


async def main():
    logging.info("STT –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
